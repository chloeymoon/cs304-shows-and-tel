'''Enables users to search and add TV shows to the database.

Written Spring 2019
Chloe Moon, Catherine Chen, Alice Zhou
'''
from flask import (Flask, render_template, make_response, url_for, request,
                   redirect, flash, session, send_from_directory, jsonify)
from werkzeug import secure_filename
import functions, random, math

import os
import bcrypt
import MySQLdb

app = Flask(__name__)
app.secret_key = 'qwygroyq34927843oew'
app.config['TRAP_BAD_REQUEST_ERRORS'] = True
app.config['UPLOADS'] = 'uploads'

#a list of common contentwarnings
#used in add() to allow users to choose from a set of warnings but also add new warnings
commonWarnings = ["Sex & Nudity","Violence & Gore","Profanity","Frightening & Intense Scenes"]
        
@app.route('/')
def index():
    '''Main page'''
    conn = functions.getConn('final_project')
    networks = functions.getAllNetworks(conn)
    contentwarnings = functions.getAllWarnings(conn)
    print 'app.py line 33 session ------'
    print session
    return render_template('home.html', networks=networks, 
                                        contentwarnings=contentwarnings)
    
@app.route('/add/', methods=['GET','POST'])
def add():
    '''Allows users to add a show to the database'''
    if request.method == 'GET':
        print 'app.py line 40 session ------'
        print session
        if 'username' not in session:
            flash('you are not logged in. Please login or join')
            return redirect( url_for('login') )
        conn = functions.getConn('final_project')
        contentwarnings = functions.getAllWarnings(conn)
        return render_template('add.html',contentwarnings=contentwarnings, 
                                commonWarnings=commonWarnings)
    if request.method == 'POST':
        conn = functions.getConn('final_project')
        title = request.form.get('title')
        year = request.form.get('year')
        genre = request.form.get('genre')
        script = request.form.get('script')
        try:
            script_file = request.files['file']
        except:
            script_file = False
        description = request.form.get('description')
        network = request.form.get('network')
        cwList = request.form.getlist('cw')
        creatorList=request.form.getlist('creator')
        genreList=request.form.getlist('genre')
        tag_names = request.form.getlist('tags')
        tag_vals = request.form.getlist('tag-args')
        filled = (title and year and genre and (script or script_file)
                and description and creatorList and network and cwList)
        if not(filled): # Should this be taken care on in front-end?
            flash("All fields should be completely filled")
            return redirect(request.referrer)
        else:
            if script_file:
                # Check to see if script file upload is a valid type
                filename = functions.isValidScriptType(script_file, title)
                if filename:
                    script = filename
                else: # file is not a valid type
                    return redirect(request.referrer)
            else:
                if 'http' not in script:
                    flash('''Invalid script link. Please include http:// at the 
                            beginning of the link.''')
                    return redirect(request.referrer)
            insert = functions.insertShows(conn, title, year, cwList, genreList, script, 
                                description, creatorList, network, 
                                tag_names, tag_vals)
            # locking failed
            if insert is False:
                flash("I'm sorry. This show already exists.")
            # locking succeeded
            else:
                insert
                print 'app.py linee 95 post session ----------'
                print session
                flash("TV show: " + title + " successfully inserted")
            return render_template('add.html')
    
@app.route('/displayAll/', methods=['GET'])
def displayAll():
    '''Displays all shows in the database'''
    if request.method == 'GET': # return all results
        conn = functions.getConn('final_project')
        shows = functions.getResultsByTitle(conn,"")
        return render_template('results.html', shows=shows)

@app.route('/profile/<int:sid>/', methods=['GET'])
def profile(sid):
    '''Displays profile page of the show based on show id (sid)'''
    if request.method == 'GET':
        conn = functions.getConn('final_project')
        show = functions.getShow(conn,sid)
        creators = functions.getCreators(conn,sid)
        warnings = functions.getWarnings(conn,sid)
        genres = functions.getGenres(conn,sid)
        tags = functions.getTags(conn,sid)
        username= session.get('username','')
        liked = functions.userLiked(conn,sid,username)
        return render_template('profile.html', show=show, creators=creators, 
                                warnings=warnings, tags=tags, genres=genres, username=username, liked=liked)
        

@app.route('/edit/<int:sid>/', methods=['GET','POST'])
def edit(sid):
    '''Edits/updates profile page of the show based on show id (sid)'''
    conn = functions.getConn('final_project')
    if request.method == 'GET':
        if 'username' not in session:
            flash('you are not logged in. Please login or join')
            return redirect( url_for('login') )
        show = functions.getShow(conn,sid)
        creators = functions.getCreators(conn,sid)
        warnings = functions.getWarnings(conn,sid)
        genres = functions.getGenres(conn,sid)
        tags = functions.getTags(conn, sid)
        return render_template('edit.html', show=show, creators=creators, 
                                warnings=warnings, tags=tags, genres=genres)
    if request.method == 'POST':
        newtitle = request.form['show-title']
        newnetwork = request.form['show-network']
        newyear = request.form['show-release']
        newdesc = request.form['show-description']
        newscript = request.form['show-script']
        try:
            newfile = request.files['file']
        except:
            newfile = False
        newgenrelist = request.form.getlist('show-genres')
        newcreators = request.form.getlist('show-creators')
        newcwList = request.form.getlist('show-warnings')
        tag_names = request.form.getlist('tags')
        tag_vals = request.form.getlist('tag-vals')
        if newfile:
            filename = functions.isValidScriptType(newfile, newtitle)
            if filename:
                newscript = filename
                print("*** NEW SCRIPT FILE ***")
                flash('''New script uploaded. Please hit SHIFT-REFRESH to refresh 
                the cache and see the new script if it has not updated.''')
            else: # file is not a valid type
                return redirect(request.referrer)
        else:
            print("No new script")
            if 'http' not in newscript:
                flash('''Invalid script link. Please include http:// at the 
                        beginning of the link.''')
                return redirect(request.referrer)
        functions.update(conn, sid, newtitle, newyear, newnetwork, 
                        newgenrelist, newcwList, newscript, newdesc,
                        newcreators, tag_names, tag_vals)
        return redirect(url_for('profile', sid=sid))


@app.route('/search/', methods=['POST'])
def search():
    '''Displays all the user requested search results'''
    if request.method == 'POST':
        conn = functions.getConn('final_project')
        title = request.form['title']
        network = request.form['network']
        creator = request.form['creator']
        genre = request.form['genre']
        contentwarning = request.form['contentwarning']
        tag_names = request.form.getlist('tags')
        tag_vals = request.form.getlist('tag-args')

        if (title=='' and network=='' and creator=='' and contentwarning==''
                      and tag_names=='' and tag_vals=='' and genre==''):
            flash("Search using at least one criteria")
            return redirect(request.referrer)
            
        if title:
            shows = functions.getResultsByTitle(conn,title)
            print shows
        elif network:
            shows = functions.getResultsByNetwork(conn,network)
        elif creator:
            shows = functions.getResultsByCreator(conn,creator)
        elif genre:
            shows = functions.getResultsByGenre(conn,genre)
        elif tag_names and tag_vals:
            shows = functions.getResultsByTags(conn, tag_names, tag_vals)
        elif contentwarning:
            shows = functions.getResultsByContentWarning(conn,contentwarning)
        return render_template('results.html', shows=shows)
        
# User session routes
@app.route('/login/', methods=['GET', 'POST'])
def login():
    '''lets a user log in'''
    if request.method=='GET':
        return render_template('login.html')
    if request.method=='POST':
        try:
            username = request.form['username']
            passwd = request.form['password']
            conn = functions.getConn('final_project')
            userRow = functions.checkPW(conn,username)
            if userRow is None:
                flash('login incorrect (app.py 201). Try again or join')
                return redirect(url_for('login'))
            hashed = userRow['hashed']
            #strings always come out as unicode, so have to encode
            if bcrypt.hashpw(passwd.encode('utf-8'),hashed.encode('utf-8')) == hashed:
                flash('successfully logged in as '+username)
                session['username'] = username
                session['logged_in'] = True
                return redirect(url_for('index'))
            else:
                flash('login incorrect. Try again or join')
                return redirect(url_for('login'))
        except Exception as err:
            print 'form submission error '+str(err)
            return redirect( url_for('login') )
            
@app.route('/logout/', methods=['POST','GET'])
def logout():
    '''lets a user log in'''
    try:
        if 'username' in session:
            # print session
            username = session['username']
            session.pop('username')
            session.pop('logged_in')
            flash('You are logged out')
            # print session
            return redirect(url_for('index'))
        else:
            flash('you are not logged in. Please login or join')
            return redirect( url_for('login') )
    except Exception as err:
        flash('some kind of error '+str(err))
        return redirect( url_for('index') )


@app.route('/signup/', methods=['GET', 'POST'])
def signup():
    '''lets a user to sign up/join'''
    if request.method=='GET':
        return render_template('signup.html')
    if request.method=='POST':
        try:
            username = request.form['username']
            passwd1 = request.form['password1']
            passwd2 = request.form['password2']
            if passwd1 != passwd2:
                flash('passwords do not match')
                return redirect( url_for('signup'))
            hashed = bcrypt.hashpw(passwd1.encode('utf-8'), bcrypt.gensalt())
            conn = functions.getConn('final_project')
            userRow = functions.checkUsername(conn,username)
            if userRow is not None: #check if username exists in the database
                flash('That username is taken')
                return redirect( url_for('signup') )
            functions.insertUser(conn,username,hashed)
            session['username'] = username
            session['logged_in'] = True
            flash('signed up and logged in as '+username)
            return redirect(url_for('index'))
        except Exception as err:
            print('form submission error '+str(err))
            return redirect( url_for('signup') )

# Other routes for non-templated pages
@app.route('/like/', methods=['POST'])
def like():
    '''Uses Ajax; return a json object instead of redirecting'''
    if request.method == 'POST': 
        conn = functions.getConn('final_project')
        #we need 3 pieces of information: 1) uid 2) showid (sid) 3) like or unlike
        username= session.get('username','')
        sid = request.form.get('sid')
        currentNum = request.form.get('currentNum')
        like = request.form.get('like')
        if like=='true':
            #like -- updating db
            like_updated = functions.addUserLikes(conn,sid,username)
        else:
            #unlike -- updating db
            like_updated = functions.deleteUserLikes(conn,sid,username)
        return jsonify(sid=sid, newNum=like_updated)
        
@app.route('/script/<sid>')
def script(sid):
    ''' This may be a kinda hacky thing to do, but if a script is local, aka
        stored in our filesystem, then we render it the normal way by passing
        the filepath to our profile template. If the script is external, aka
        we stored a http link in our database, then we do a straight redirect
        to that stored URL. '''
    conn = functions.getConn('final_project')
    curs = conn.cursor(MySQLdb.cursors.DictCursor)
    script, is_local = functions.getScript(conn, sid)
    print("**************** IN SCRIPT ROUTE ****************")
    print(script, is_local)
    print("ISSS LOCALL:", is_local)
    return script if (is_local=="local") else redirect(script)

if __name__ == '__main__':
    app.debug = True
    app.run('0.0.0.0',8082)
'''Functions interacting with the backend that will be used in app.py.

Written Spring 2019
Chloe Moon, Catherine Chen
'''

'''multiple search criteria: caluses = [] and then '   '.join(clauses)'''
'''select * from table where (title = % or '')''' # title='' returns an empty string
'''construct a view file'''
'''lock for threads'''
from flask import Flask, flash, send_from_directory
from threading import Lock
from werkzeug import secure_filename
import os, sys
import MySQLdb
import functions, random, math

app = Flask(__name__)
app.secret_key = ''.join([ random.choice(('ABCDEFGHIJKLMNOPQRSTUVXYZ' +
                                          'abcdefghijklmnopqrstuvxyz' +
                                          '0123456789'))
                           for i in range(20) ])
app.config['UPLOADS'] = 'uploads'
lock = Lock()

def getConn(db):
    '''Connects to local host'''
    conn = MySQLdb.connect(host='localhost',
                           user='ubuntu',
                           passwd='',
                           db=db)
    conn.autocommit(True) 
    return conn

def getAllNetworks(conn):
    '''Returns all the networks in the database, for the dropdown menu in the home page'''
    curs = conn.cursor(MySQLdb.cursors.DictCursor)
    curs.execute('select name from networks')
    return curs.fetchall()
    
def getAllWarnings(conn):
    '''Returns all the content warnings in the database, for the dropdown menu in the home page'''
    curs = conn.cursor(MySQLdb.cursors.DictCursor)
    curs.execute('select name from contentwarnings')
    return curs.fetchall()
    
def getCreators(conn,sid):
    '''Returns all creators of the show'''
    curs = conn.cursor(MySQLdb.cursors.DictCursor)
    curs.execute('select creators.name from creators, shows, showsCreators '
                    +'where showsCreators.sid=shows.sid'+
                    ' and showsCreators.cid=creators.cid and shows.sid=%s', (sid,))
    return curs.fetchall()
    
def getGenres(conn,sid):
    '''Returns all genres of the show'''
    curs = conn.cursor(MySQLdb.cursors.DictCursor)
    curs.execute('select genres.name from genres, shows, showsGenres '
                +'where showsGenres.sid=shows.sid'+
                ' and showsGenres.gid=genres.gid and shows.sid=%s', (sid,))
    return curs.fetchall()
    
def getScript(conn, sid):
    ''' Given a show ID, return the URL for the script and whether the URL is
        for a script that is stored locally or externally. Context: A script 
        can be stored one of two ways: either as a URL for an external website 
        (external) or as a  filepath that leads to a document that was uploaded 
        to the filesystem (local). '''
    curs = conn.cursor(MySQLdb.cursors.DictCursor)
    numrows = curs.execute('select script from shows where sid=%s', (sid,))
    row =  curs.fetchone()
    if "http" in row['script'] or "www" in row['script']:
        return row['script'], "external"
    else:
        val = send_from_directory(app.config['UPLOADS'],
                                  row['script'])
        return val, "local"

def getShow(conn,sid):
    '''Returns show with network name given sid'''
    curs = conn.cursor(MySQLdb.cursors.DictCursor)
    curs.execute('select networks.name as network, shows.* from shows inner join networks on '+
                    'networks.nid = shows.nid where sid = %s', (sid,))
    return curs.fetchone()
    
def getTags(conn,sid):
    '''Returns all tags associated with a given show'''
    curs = conn.cursor(MySQLdb.cursors.DictCursor)
    curs.execute('select name, val from tags where sid=%s', (sid,))
    return curs.fetchall()
    
def getWarnings(conn,sid):
    '''Returns all contentwarnings of the show'''
    curs = conn.cursor(MySQLdb.cursors.DictCursor)
    curs.execute('select contentwarnings.name from contentwarnings, shows, showsCWs '
                    +'where showsCWs.sid=shows.sid'+
                    ' and showsCWs.cwid=contentwarnings.cwid and shows.sid=%s', (sid,))
    return curs.fetchall()

# By Search Terms
def getResultsByContentWarning(conn,term):
    '''Returns all shows based on the search term using network'''
    curs = conn.cursor(MySQLdb.cursors.DictCursor)
    curs.execute('select * from shows, showsCWs, contentwarnings '
                +'where showsCWs.sid=shows.sid and contentwarnings.cwid=showsCWs.cwid '
                +'and contentwarnings.name=%s', (term,))
    return curs.fetchall()
    
def getResultsByCreator(conn,term):
    '''Returns all shows based on the search term using creator'''
    curs = conn.cursor(MySQLdb.cursors.DictCursor)
    term = '%' + term + '%'
    curs.execute('select * from shows, showsCreators, creators '
                +'where showsCreators.sid=shows.sid and creators.cid=showsCreators.cid '
                +'and creators.name like %s group by shows.title', (term,))
    return curs.fetchall()
    
def getResultsByGenre(conn,term):
    '''Returns all shows based on the search term using genre'''
    curs = conn.cursor(MySQLdb.cursors.DictCursor)
    term = '%' + term + '%'
    curs.execute('select * from shows, showsGenres, genres '
                +'where showsGenres.sid=shows.sid and genres.gid=showsGenres.gid '
                +'and genres.name like %s group by shows.title', (term,))
    return curs.fetchall()
    
def getResultsByNetwork(conn,term):
    '''Returns all shows based on the search term using network'''
    curs = conn.cursor(MySQLdb.cursors.DictCursor)
    curs.execute('select networks.name as network, shows.* from shows '+
                'inner join networks on networks.nid=shows.nid where networks.name= %s', (term,))
    return curs.fetchall()
    
def getResultsByTags(conn, tag_names, tag_vals):
    '''Returns all shows based on the search term using tags'''
    curs = conn.cursor(MySQLdb.cursors.DictCursor)
    tags = tuple(zip(tag_names, tag_vals))
    curs.execute('''select * from shows where sid in
                    (select sid from tags where (name, val) in %s)''', (tags,))
    return curs.fetchall()
    
def getResultsByTitle(conn,term):
    '''Returns all shows based on the search term using title'''
    curs = conn.cursor(MySQLdb.cursors.DictCursor)
    term = '%' + term + '%'
    curs.execute('select * from shows where title like %s', (term,))
    return curs.fetchall()

# ID Getters
def getCid(conn,creatorName):
    '''Returns cid based on creator name'''
    curs = conn.cursor(MySQLdb.cursors.DictCursor)
    curs.execute('select cid from creators where name = %s',[creatorName])
    res = curs.fetchone()
    if res:
        return res['cid']
    else:
        return None
        
def getCWid(conn,cw):
    '''Returns cwid based on contentwarning'''
    curs = conn.cursor(MySQLdb.cursors.DictCursor)
    curs.execute('select cwid from contentwarnings where name = %s',[cw])
    res = curs.fetchone()
    if res:
        return res['cwid']
    else:
        return None
        
def getGid(conn,genre):
    '''Returns cid based on creator name'''
    curs = conn.cursor(MySQLdb.cursors.DictCursor)
    curs.execute('select gid from genres where name = %s',[genre])
    res = curs.fetchone()
    if res:
        return res['gid']
    else:
        return None
        
def getNid(conn,networkName):
    '''Returns nid based on network name'''
    curs = conn.cursor(MySQLdb.cursors.DictCursor)
    curs.execute('select nid from networks where name = %s',[networkName])
    res = curs.fetchone()
    if res:
        return res['nid']
    else:
        return None
    
def getSid(conn,showTitle):
    '''Returns sid based on show name'''
    curs = conn.cursor(MySQLdb.cursors.DictCursor)
    curs.execute('select sid from shows where title = %s',[showTitle])
    res = curs.fetchone()
    if res:
        return res['sid']
    else:
        return None
        
# helper functions for insertShows: many-to-many relationships (Contentwarnings, Creators)
def insertContentwarnings(conn,sid,cwList):
    '''Inserts each creator's id first if not already in the database. Also inserts the relationship (e.g. showsCWs).'''
    curs = conn.cursor(MySQLdb.cursors.DictCursor)
    for cw in cwList:
        # race condition -- told to insert and catch errors but realized 
        # that it won't give an error but add a new contentwarning of the same name;
        # changing primary key with cwid auto incremented was impossible, etc...
        # -- so locked insertShows for convenience. I think it's better to lock more than not.
        if getCWid(conn,cw) is None:
            curs.execute('insert into contentwarnings (name) values(%s)', [cw])
        cwid=getCWid(conn,cw)
        curs.execute('insert into showsCWs (sid,cwid) values (%s, %s)',[sid,cwid])

def insertCreators(conn,sid,creatorList):
    '''Inserts each cw's id first if not already in the database. Also inserts the relationship.'''
    curs = conn.cursor(MySQLdb.cursors.DictCursor)
    for creator in creatorList:
        if getCid(conn,creator) is None:
            curs.execute('insert into creators (name) values(%s)', [creator])
        cid = getCid(conn,creator)
        curs.execute('insert into showsCreators (sid,cid) values(%s, %s)',[sid,cid])

def insertGenres(conn,sid,genreList):
    '''Inserts each cw's id first if not already in the database. Also inserts the relationship.'''
    curs = conn.cursor(MySQLdb.cursors.DictCursor)
    for genre in genreList:
        if getGid(conn,genre) is None:
            curs.execute('insert into genres (name) values(%s)', [genre])
        gid = getGid(conn,genre)
        curs.execute('insert into showsGenres (sid,gid) values(%s, %s)',[sid,gid])
                    
def insertShows(conn, title, year, cwList, genreList, script, description, 
                creatorList, network, tag_names, tag_vals):
    ''' Inserts show, creator, show&creator relationship etc. to the database, 
        given form values '''
    curs = conn.cursor(MySQLdb.cursors.DictCursor)
    lock.acquire()
    print 'locked functions.py 220'
    if getSid(conn,title): # if the show already exists in the db
        lock.release()
        print 'releasing lock; show already exists'
        return False
    # check if network exists and, if not, inserts the network in the networks table
    if getNid(conn,network) is None:
        curs.execute('insert into networks (name) values(%s)', [network])
    nid = getNid(conn,network)
    curs.execute('insert into shows (title, nid, year, script, description) values(%s, %s, %s, %s, %s)', [title, nid, year, script, description])
    sid = getSid(conn,title)
    insertContentwarnings(conn,sid,cwList)
    insertCreators(conn,sid,creatorList)
    insertGenres(conn,sid, genreList)
    if tag_names and tag_vals: # If tags info exists, insert into database
        insertTags(conn, sid, tag_names, tag_vals)
    lock.release()
    return True
    
def insertTags(conn, sid, tag_names, tag_vals):
    ''' Given a show's ID and lists of tag names and values, inserts the 
        information into the tags table. '''
    curs = conn.cursor(MySQLdb.cursors.DictCursor)
    for i in range(len(tag_names)):
        name = tag_names[i]
        val = tag_vals[i]
        curs.execute('insert into tags (sid, name, val) values(%s, %s, %s)', 
                    [sid, name, val])
                    
# Helper function for script upload
def isValidScriptType(script_file, title):
    ''' Given a document from a file upload, check to see if it is a valid 
        type (.doc, .docx, .pdf). If it is, save the document to the 
        filesystem and return the filename. Otherwise flash an error message 
        and return false. '''
    mimetype = script_file.content_type.split('/')[1]
    if mimetype.lower() not in ['doc','docx','pdf']:
        msg = 'ERROR: File type not a DOC, DOCX or PDF: {}'.format(mimetype)
        flash(msg)
        return False
    # If valid file type, then continue with file upload
    filename = secure_filename('{}.{}'.format(title,mimetype))
    pathname = os.path.join(app.config['UPLOADS'],filename)
    script_file.save(pathname)
    print(" *** NEW SCRIPT SAVED *** ")
    return filename 

# Update functions
def updateCreators(conn,sid,newCreators):
    ''''Given a list of new creators, compares it with old creators and updates'''
    curs = conn.cursor(MySQLdb.cursors.DictCursor)
    oldCreators = [c['name'] for c in getCreators(conn,sid)]
    toDelete = [c for c in oldCreators if c not in newCreators]
    toAdd = [c for c in newCreators if c not in oldCreators]
    for c in toDelete:
        cid = getCid(conn,c)
        curs.execute('delete from showsCreators where sid=%s and cid=%s',[sid,cid])
        if len(getResultsByCreator(conn,c))==0:
            curs.execute('delete from creators where name=%s', [c])
    for c in toAdd:
        if getCid(conn,c) is None:
            curs.execute('insert into creators (name) values(%s)', [c])
        cid = getCid(conn,c)  
        curs.execute('insert into showsCreators (sid,cid) values (%s,%s)',[sid,cid])

def updateGenres(conn,sid,newGenres):
    ''''Given a list of new genres, compares it with old genres and updates'''
    curs = conn.cursor(MySQLdb.cursors.DictCursor)
    oldGenres = [g['name'] for g in getGenres(conn,sid)]
    toDelete = [g for g in oldGenres if g not in newGenres]
    toAdd = [g for g in newGenres if g not in oldGenres]
    for g in toDelete:
        gid = getGid(conn,g)
        curs.execute('delete from showsGenres where sid=%s and gid=%s',[sid,gid])
        if len(getResultsByGenre(conn,g))==0:
            curs.execute('delete from genres where name=%s', [g])
    for g in toAdd:
        if getGid(conn,g) is None:
            curs.execute('insert into genres (name) values(%s)', [g])
        gid = getGid(conn,g)  
        curs.execute('insert into showsGenres (sid,gid) values (%s,%s)',[sid,gid])
        
def updateTags(conn, sid, tag_names, tag_vals):
    ''' Given lists of tag names and values, update the database with new 
        tags if they do not already exist. '''
    curs = conn.cursor(MySQLdb.cursors.DictCursor)
    oldTags = [(tag['name'], tag['val']) for tag in getTags(conn, sid)]
    newTags = zip(tag_names, tag_vals)
    print("Old tags:", oldTags)
    toDelete = [tag for tag in oldTags if tag not in newTags]
    toAdd = [tag for tag in newTags if tag not in oldTags]
    print("Deleting:", toDelete)
    for tag in toDelete:
        curs.execute('''delete from tags where sid=%s 
                        and name=%s and val=%s''', (sid, tag[0], tag[1]))
    print("Adding:", toAdd)
    for tag in toAdd:
        curs.execute('''insert into tags (sid, name, val) 
                        values (%s, %s, %s)''', (sid, tag[0], tag[1]))
                        
def updateWarnings(conn,sid,newwarnings):
    '''Given a list of new warnings, compares it with old warnings and updates'''
    curs = conn.cursor(MySQLdb.cursors.DictCursor)
    oldwarnings = [w['name'] for w in getWarnings(conn,sid)]
    #because the number of new list is not necessarily the same as the old list,
    #decided to delete and insert the differences rather than updating
    toDelete = [w for w in oldwarnings if w not in newwarnings]
    toAdd = [w for w in newwarnings if w not in oldwarnings]
    # use set
    for w in toDelete:
        cwid = getCWid(conn,w)
        curs.execute('delete from showsCWs where sid=%s and cwid=%s',[sid,cwid])
        if len(getResultsByContentWarning(conn,w))==0:
            curs.execute('delete from contentwarnings where name=%s', [w])
    for w in toAdd:
        if getCWid(conn,w) is None:
            curs.execute('insert into contentwarnings (name) values(%s)', [w])
        cwid = getCWid(conn,w)  
        curs.execute('insert into showsCWs (sid,cwid) values (%s,%s)',[sid,cwid])

# would there be the case where we want to change the sid? -- not really?
def update(conn, sid, title, year, network, genreList, cwList, script, 
           description, creators, tag_names, tag_vals):
    ''''Updates the show'''
    curs = conn.cursor(MySQLdb.cursors.DictCursor)
    # old show information
    lock.acquire()
    oldshow = getShow(conn,sid) #returns network name, sid, nid, title, etc.
    # lock.acquire()
    # Update intermediate tables first
    updateWarnings(conn,sid,cwList)
    updateCreators(conn,sid,creators)
    updateGenres(conn,sid,genreList)
    updateTags(conn, sid, tag_names, tag_vals)
    # racing condition: someone could've (almost simultaneously)
    # added this network after we find that nid is none but before inserting
    # so locked entire block to be safe
    if getNid(conn,network) is None:
        curs.execute('insert into networks (name) values(%s)', [network])
    nid = getNid(conn,network)
    curs.execute('''update shows set title=%s, year=%s, script=%s, 
                    description=%s, nid=%s where sid=%s''', 
                    [title, year, script, description, nid, sid]) 
                    
    #delete values if none of the left shows has them
    if len(getResultsByNetwork(conn,oldshow['network']))==0:
        curs.execute('delete from networks where name=%s', [oldshow['network']])
    lock.release()

#username & joins
def checkUsername(conn, username):
    '''check if username already exists; username has to be unique'''
    curs = conn.cursor(MySQLdb.cursors.DictCursor)
    curs.execute('''select username from userpass where username=%s''', [username])
    return curs.fetchone()
    
def insertUser(conn,username,hashed):
    '''inserts username and password into userpass table'''
    curs = conn.cursor(MySQLdb.cursors.DictCursor)
    curs.execute('insert into userpass(username,hashed) values (%s,%s)',[username,hashed])

def checkPW(conn,username):
    '''select hashed password given username'''
    curs = conn.cursor(MySQLdb.cursors.DictCursor)
    curs.execute('select hashed from userpass where username=%s',[username])
    return curs.fetchone()
    
# using with ajax, likes
def addUserLikes(conn,sid,username):
    '''user likes; adds likes table and increments numLikes values and updates shows table'''
    curs = conn.cursor(MySQLdb.cursors.DictCursor)
    lock.acquire()
    uid = getUid(conn,username)
    curs.execute('insert into likes(sid,uid) values (%s,%s)',[sid,uid])
    newNumLikes = int(getNumLikes(conn,sid))+1
    curs.execute('update shows set numLikes=%s where sid=%s',[newNumLikes,sid])
    lock.release()
    return getNumLikes(conn,sid)
    
def deleteUserLikes(conn,sid,username):
    '''User unlikes; deletes from likes table and decrements value and updates shows table'''
    curs = conn.cursor(MySQLdb.cursors.DictCursor)
    lock.acquire()
    uid = getUid(conn,username)
    curs.execute('delete from likes where sid=%s and uid=%s',[sid,uid])
    newNumLikes = int(getNumLikes(conn,sid))-1
    curs.execute('update shows set numLikes=%s where sid=%s',[newNumLikes,sid])
    lock.release()
    return getNumLikes(conn,sid)
    
def getUid(conn,username):
    '''Returns uid based on username'''
    curs = conn.cursor(MySQLdb.cursors.DictCursor)
    curs.execute('select uid from userpass where username = %s',[username])
    res = curs.fetchone()
    if res:
        return res['uid']
    else:
        return None
        
def getNumLikes(conn,sid):
    '''returns the number of likes of this show'''
    curs = conn.cursor(MySQLdb.cursors.DictCursor)
    curs.execute('select numLikes from shows where sid = %s',[sid])
    res = curs.fetchone()
    if res:
        return res['numLikes']
    else:
        return None
        
def userLiked(conn,sid,username):
    '''returns the dictionary if this user liked this show'''
    curs = conn.cursor(MySQLdb.cursors.DictCursor)
    uid = getUid(conn,username)
    curs.execute('select * from likes where sid=%s and uid=%s',[sid,uid])
    res = curs.fetchone()
    if res:
        return res
    else:
        return None

if __name__ == '__main__':
    conn = getConn('final_project'){% extends "base.html" %}

{% block content %}
<h1 align="center">Add Show</h1>

<div class="row justify-content-center">
<div class="col-md-5">

<form name="add" id="add" method=POST 
    enctype = "multipart/form-data" action={{url_for('add')}}>
    
<div class=form-inputs>
    <div class="form-group">
        <input type="hidden" name="uid" value="{{uid}}">
        <p><label for=title>Title:
            <input class="form-control" type="text" id="title" name="title" size="60" required/>
        </label></p>
    </div>

    <div class="form-group">
        <div class="creator">
            <label for="creator">Creator: </label> <br>
                <input type="button" id="creator" class="btn btn-outline-primary" 
                value="Add Creators" onclick="addCreators()" name="creator"/>
        </div>
    </div>

    <div class="form-group">
        <p><label for=network>Network:
            <input class="form-control" type="text" id="network" name="network" required/>
        </label></p>
    </div>

    <div class="form-group">
        <p><label for=year>Year Debuted:
            <input class="form-control" type="text" id="year" name="year" required/>
        </label></p>
    </div>
        
    <div class="form-group">
        <div class="genre">
            <label for=genre>Genre: </label> <br>
            <input type="button" class="btn btn-outline-primary" value="Add Genre" 
                onclick="addGenres()" id="genre"/>
        </div>
    </div>

    <div class="form-group">
        <div class="contentwarning">
            <label for=warning-dropdown>Content Warning: </label>
            <select id="warning-dropdown"class="form-control" name="warning-dropdown" id="warning-dropdown"> 
                {% for common in commonWarnings %}
                    <option value={{common}}>{{common}}</option>
                {% endfor %}
                {% for warning in contentwarnings %}
                    {% if warning.name not in commonWarnings %}
                        <option value="{{warning.name}}">{{warning.name}}</option>
                    {% endif %}
                {% endfor %}
                <option value="Other">Other (Add a new warning)</option> 
                <input type="button" class="btn btn-outline-primary" value="Add" 
                        id="cwbutton" name="cwbutton"/>
               <span id="newwarning_placeholder"></span>
            </select>
        </div>
    </div>
    
    <div class="form-group">
        <div class="tags">
            <label for=tag>Tags:
            <input type="button" id="tag" class="btn btn-outline-primary" 
                    name="tag" value="Add Tags" onclick="addTag()"/>
            </label>
        </div>
    </div>
        
    <div class="form-group">
        <p><label for=script>Link to Script: </label>
            <input class="form-control" type="text" id="script" name="script" 
                    size="100" placeholder="http://"/>
            <label for="show-upload">Or upload a file (.doc, .docx, or .pdf):</label>
                <input id="show-upload" type="file" name ="file" />
        </p>
    </div>

    <div class="form-group">
        <p><label for=description>Description:</label>
            <textarea class="form-control" id="description" rows="4" cols="110"
                        name='description'></textarea>
        </p>
        
    </div>
        <p><button type="submit" class="btn btn-success">Submit</button></p>
    </div>
    
</form>
</div>
</div>

<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.1.1/jquery.min.js"></script>
<script language="javascript">
/* global $ */
// Helper function to remove input
function deleteUl(elem){
    elem.closest('div').remove();
}

$("#cwbutton").on("click", function (e) {
    var selected = $("#warning-dropdown option:selected").text();
    if ($("#warning-dropdown option:selected").val()=="Other"){
        $("#newwarning_placeholder")
        .append('<div>Add a new warning: <input type="text" id="newcw"/>' +
                    '<input type="button" value="Add" onclick="addNewWarning()" id="newcwbutton" name="newcwbutton"/></div>');
    } else {
        var warninghtml = '<div id="warning"><input type="text"  id="cw" value="'+selected+'" name="cw"/>'
                     +'<button type="button"  class="btn btn-outline-danger" onclick="deleteUl(this)" name="delete">X</button></div>'
        $(warninghtml).appendTo(".contentwarning")
    }
});

// Adds a new input for creator on button click
function addCreators() {
// 	$("#c_placeholder").append('<input type="text" id="creator" name="creator"/>');
    var creatorhtml = '<div><input type="text" id="creator" name="creator" required/>'
            +'<button type="button" class="btn btn-outline-danger" onclick="deleteUl(this)" name="delete">X</button></div>'
    $(creatorhtml).appendTo(".creator")
}

// Adds a new input for genre on button click
function addGenres() {
    var genrehtml = '<div><input type="text" id="genre" name="genre" required/>'
            +'<button type="button" class="btn btn-outline-danger" onclick="deleteUl(this)" name="delete">X</button></div>'
    $(genrehtml).appendTo(".genre")
}

// Adds a new input for content warning on button click
function addNewWarning(){
    var newwarning = $('#newcw').val();
    var warninghtml = '<div id="warning"><input type="text" value="'+newwarning+'" name="cw"/>'
                +'<button type="button" name="delete" onclick="deleteUl(this)">X</button></div>'
    $(warninghtml).appendTo('.contentwarning')
}

// Adds a new tag drop down menu for tag type and text box for tag value
// when 'Add Tags' button is clicked
function addTag(){
    var taghtml = ` <div class=tag-input>
                        <label for=tags>
                        <select class="form-control" id="tags" name="tags">
                            <option value=''>Choose a tag</option>
                            <option value='pace'>Pace</option>
                            <option value='length'>Length</option>
                            <option value='type'>Type</option>
                        </select>
                        </label>
                        <label for="tag-args">tag
                            <input class="form-control" type="text" id="tag-args" name="tag-args" required/>
                        </label>
                        <button type="button"  class="btn btn-outline-danger" onclick="deleteUl(this)" name="delete">X</button></div>
                    </div>`;
    $(taghtml).appendTo(".tags");
}

</script>
{% endblock %}

<!doctype html>
<html lang='en'>
<head>
    <meta charset='utf-8'>
    <meta name=author content="shows-and-tel">
    {% block headstuff %}
        <title>Shows-and-Tel</title>
    {% endblock %}
    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css" integrity="sha384-ggOyR0iXCbMQv3Xipma34MD+dH/1fQ784/j6cY/iJTQUOhcWr7x9JvoRxT2MZw1T" crossorigin="anonymous">
    <link rel='stylesheet' href="{{ url_for('static', filename = 'style.css') }}">
    <!-- Custom styles for this template -->
   <!-- <link href="floating-labels.css" rel="stylesheet"> -->
</head>
<body>


<nav class="navbar navbar-expand-md navbar-dark bg-dark">
    <a class="navbar-brand" href="">Shows & Tel</a>
    <button value="toggle" name="toggle" class="navbar-toggler" type="button" data-toggle="collapse" data-target="#collapsingNavbar">
        <span class="navbar-toggler-icon"></span>"
    </button>
    <div class="navbar-collapse collapse" id="collapsingNavbar">
        <ul class="navbar-nav">
            <li class="nav-item">
                <a class="nav-link" href={{url_for('index')}}>Home</a>
            </li>
            <li class="nav-item">
                <a class="nav-link" href={{url_for('displayAll')}}>All Shows</a>
            </li>
        </ul>
        
        <ul class="navbar-nav ml-auto">
          {% if not session['logged_in'] %} 
          
            <li class="nav-item">
                <a class="nav-link" href={{url_for("signup")}}>Sign Up</a>
            </li>
            
            <li class="nav-item">
                <a class="nav-link" href={{url_for("login")}}>Login</a>
            </li>
          {% else %}
            <li class="nav-item">
                <a class="nav-link" href={{url_for('add')}}>Add</a>
            </li>
            
            <li class="nav-item">
                <a class="nav-link" href={{url_for('logout')}}>Logout</a>
            </li>
            
           {% endif %}
        </ul>
    </div>
</nav>
<br>

<div class="row justify-content-center" style="color: red;">
{% with messages = get_flashed_messages() %}
  {% if messages %}
    <div id="flashes">
    {% for msg in messages %}
      <p>{{msg}}</p>
    {% endfor %}
    </div>
  {% endif %}
{% endwith %}
</div>

<!--inheriting jquery-->
<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <!--<script src="https://code.jquery.com/jquery-3.3.1.slim.min.js" integrity="sha384-q8i/X+965DzO0rT7abK41JStQIAqVgRVzpbzo5smXKp4YfRvH+8abtTE1Pi6jizo" crossorigin="anonymous"></script>-->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.7/umd/popper.min.js" integrity="sha384-UO2eT0CpHqdSJQ6hJty5KVphtPhzWj9WO1clHTMGa3JDZwrnQq4sF86dIHNDz0W1" crossorigin="anonymous"></script>
    <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/js/bootstrap.min.js"></script>
    
{% block content %}
<!--contents here-->
{% endblock %}


</body>
</html>{% extends "base.html" %}
  {% block headstuff %}<title>Edit Show</title>{% endblock %}

{% block content %}

<div class="row justify-content-center">
<div class="col-md-7">
  
  <h1 show=show>Update Show: {{show.title}} (#{{show.sid}})</h1>
    
  <p>You may delete or add content warnings and creators. However, a show must 
    have at least one content warning and creator.</p>
  <p>Note about tags: if you would like to update a show's tags, use the 
    dropdown menu to choose a new tag type and enter a value into the 
    corresponding textbox. However, if you would like to leave a tag unchanged,
    you need to re-enter the tag type in the dropdown menu. For your reference, 
    here are this show's tags:</p>
    {% for tag in tags %}
    <p>{{tag.name}}, {{tag.val}}</p>
    {% endfor %}

    <form method=POST action="{{url_for('edit',sid=show.sid)}}" 
      enctype = "multipart/form-data" show=show creators=creators
      warnings=warnings>
      <table>
        <tr>
          <td><label for="show-title">Title</label></td>
          <td><input id="show-title" name='show-title' value='{{show.title}}'></td> 
        </tr>
        <tr>
          <td><label for="show-network">Network</label></td>
          <td><input id="show-network"name='show-network' value='{{show.network}}'></td>
        </tr>
        <tr>
          <td><label for="show-release">Release year</label></td>
          <td><input id="show-release" name='show-release' value='{{show.year}}'></td>
        </tr>
        <tr>
          <td><label for="show-description">Description</label></td>
          <td><textarea id="show-description" rows="4" cols="75" name='show-description'>{{show.description}}</textarea></td>
        </tr>
        <tr>
          <td><label for="show-script">Script</label></td>
          <td>
            <input name='show-script' id="show-script" value='{{show.script}}' size="80">
                <label for="show-upload">Or upload a file (.doc, .docx, or .pdf):</label>
                <input id="show-upload" type="file" name="file" />
            </p>
          </td>
        </tr>
        
          
          {% for genre in genres %}
          <tr class='genre'>
            <td><label for="{{genre.name}}">Genre</label></td>
            <td><input id="{{genre.name}}" name='show-genres' value='{{genre.name}}'>
              {% if genre == genres[0] %}
                <button type="button" class="btn btn-outline-primary" name="add" id="addgenre">Add Genre</button>
              {% elif genre != genres[0] %}
              <button type="button" name="delete" onclick="deleteRow(this)">X</button>
              {% endif %}
            </td>
          </tr>
          {% endfor %}
          
          {% for warning in warnings %}
          <tr class='warning'>
              <td><label for="{{warning.name}}">Content Warning</label></td>
              <td><input id="{{warning.name}}" name='show-warnings' value='{{warning.name}}'>
              {% if warning == warnings[0] %}
                <button type="button" class="btn btn-outline-primary" id="addwarning">Add Warning</button>
              {% elif warning != warnings[0] %}
                <button type="button" class= "btn btn-outline-danger" name="delete" onclick="deleteRow(this)">X</button>
              {% endif %}
              </td>
          </tr>
          {% endfor %}

        
          {% for creator in creators %}
          <tr class='creator'>
            <td><label for="{{creator.name}}">Creator</label></td>
            <td><input id="{{creator.name}}" name='show-creators' value='{{creator.name}}'>
              {% if creator == creators[0] %}
                <button type="button" class="btn btn-outline-primary" name="add" id="addcreator">Add Creator</button>
              {% elif creator != creators[0] %}
              <button type="button" class="btn btn-outline-danger"name="delete" onclick="deleteRow(this)">X</button>
              {% endif %}
            </td>
          </tr>
          {% endfor %}
        
          {% for tag in tags %}
          <tr class='tag' name={{tag.name}}>
            <td><label for="tags">Tags</label></td>
            <td><select id="tags" class="form-control" name=tags>
                  <option value=''>Choose a tag type</option>
                  <option value='pace'>Pace</option>
                  <option value='length'>Length</option>
                  <option value='type'>Type</option>
              </select>
              <label for='{{tag.val}}'>Tags</label>
              <input id='{{tag.val}}' name='tag-vals' value='{{tag.val}}'>
              {% if tag == tags[0] %}
                <button type="button" class="btn btn-outline-primary" name="add" id="add-tag">Add Tag</button>
              {% elif tag != tags[0] %}
              <button type="button" class="btn btn-outline-danger" name="delete" onclick="deleteRow(this)">X</button>
              {% endif %}
            </td>
          </tr>
          {% endfor %}
          
      </table>
      <br>
      <input type="submit" class="btn btn-success" name="submit" value="update">
    </form>
  </div>
  </div>
    

<script language="javascript">
/* global $ */

//accessibility
var counter = 0;

// Attempted to load previous tag types into the dropdown menus, but
// didn't have time to finish it
$(document).ready(function() {
  var tag_name = $(".tag").attr("name");
  console.log(tag_name);
  // $('#tags option[value='+tag_name+']').prop('selected', true);
});

// Adds a new input for a content warning on button click
$("#addwarning").on('click', function(){
  var newWarning = '<tr><td><label for="' + counter.toString() + '">Content Warning</label></td><td><input id="' + counter.toString() +'" name="show-warnings" value="">' +
                    '<button type="button" class= "btn btn-outline-danger" name="delete" onclick="deleteRow(this)">X</button></td></tr>';
  $(newWarning).insertAfter($(this).closest('.warning'));
  counter++;
});

// Adds a new input for a creator on button click
$("#addcreator").on('click', function(){
  var newCreator = ('<tr><td><label for="' + counter.toString() + '">Creator</label></td><td><input name="show-creators" id="' + counter.toString() + '" value="">'+
              '<button type="button" class= "btn btn-outline-danger" name="delete" onclick="deleteRow(this)">X</button></td></tr>');
  $(newCreator).insertAfter($(this).closest('.creator'));
  counter++;
});

// Adds a new input for a genre on button click
$("#addgenre").on('click', function(){
  var newGenre = ('<tr><td><label for="' + counter.toString() + '">Genre</label></td><td><input name="show-genres" value="" id="' + counter.toString() + '">'+
              '<button type="button" class= "btn btn-outline-danger" name="delete" onclick="deleteRow(this)">X</button></td></tr>');
  $(newGenre).insertAfter($(this).closest('.genre'));
  counter++;
});

// Adds new inputs for tag name (type) and value on button click
$("#add-tag").on('click', function(){
  var newTag = `<tr class='tag'>
            <td><label for="tags">Tags</label></td>
            <td><select id="tags" name=tags>
                  <option value=''>Choose a tag</option>
                  <option value='pace'>Pace</option>
                  <option value='length'>Length</option>
                  <option value='type'>Type</option>
              </select>
              <input id="tag-vals" name='tag-vals' value='' required>
              {% if tag == tags[0] %}
                <button type="button" name="add" id="add-tag">Add Tag</button>
              {% elif tag != tags[0] %}
              <button type="button" class= "btn btn-outline-danger" name="delete" onclick="deleteRow(this)">X</button>
              {% endif %}
            </td>
          </tr>`;
  $(newTag).insertAfter($(this).closest('.tag'));
  counter++;
})

// Helper function to delete an input 
function deleteRow(elem){
    console.log('deleting');
    elem.closest('tr').remove();
};

</script>
{% endblock %}{% extends "base.html" %}

{% block content %}

<div class="row justify-content-center">
<div class="col-md-6">
    <div class=search>
        <div class=form>
            <h1 align:"center">Welcome to Shows & Tel</h1>
            <p align:"center">Use the form to search for a TV show! Currently, 
                    this form only works with one search criteria (e.g. Title
                    or Creator, etc.)</p>

            <form id="search" method=POST action="{{url_for('search')}}">
                <div class=form-inputs>
                    <input type="hidden" name="uid" value="{{uid}}">
                    <p><label for=title>Title:
                        <input type="text" class="form-control" id="title" 
                                name="title" />
                    </label></p>
                    <p><label for=creator>Creator:
                        <input type="text" class="form-control" id="creator" 
                                name="creator" />
                    </label></p>

                    <p><label for=genre>Genre:
                    </label><input type="text" class="form-control" id="genre" 
                        name="genre" placeholder="e.g. Crime or Comedy"/></p>
                    
                    <p><label for=network>Network:
                        <select id="network" class="form-control" name="network" />
                                <option value="">Select Network</option>
                            {% for network in networks %}
                                <option>{{network.name}}</option>
                            {% endfor %}
                        </select>
                    </label></p>
                    
                    <p><label for=contentwarning>Content Warning:
                        <select id="contentwarning" class="form-control" name="contentwarning" />
                                <option value="">Select Content Warning</option>
                            {% for warning in contentwarnings %}
                                <option>{{warning.name}}</option>
                            {% endfor %}
                        </select>
                    </label></p>
                    
                    
                    <label for=tags>Tags:</label>
                    <p>Example: Pace, fast</p>
                    <ul id="tags-list">
                        <div class=tag-input>
                            <select id="tags" class="form-control" name="tags">
                                <option value=''>Choose a tag type</option>
                                <option value='pace'>Pace</option>
                                <option value='length'>Length</option>
                                <option value='type'>Type</option>
                            </select>
                            
                        <label for=tag-args>Tag Name
                                <input type="text" class="form-control" 
                                        id="tag-args" name="tag-args"/>
                         </label>
                    </div>
                    </ul>
                     <button type="button" class="btn btn-outline-primary" 
                            id="add-tag" name="add-tag">
                        Add another tag
                    </button>  
                    <br> <br>
                    <p><button type="submit" class="btn btn-success">Submit</button></p>
                </div>
            </form>
        </div>
    </div>
</div>
</div>

<script>
/* global $ */

$("#add-tag").on("click", function (event) {
    $("ul#tags-list").append($("div.tag-input").html())
    console.log("Adding another tag input");
});

</script>

{% endblock %}{% extends "base.html" %}

{% block content %}

<div class="row justify-content-center">
<div class="col-md-3">

<h1>Login</h1>

<p>Please login using the form below:</p>
    
<form id="loginform" action="{{url_for('login')}}" method="post">
    <p><label for='username'>Username: <input type="text" id='username' class="form-control" name="username" required pattern="^\w+$"></label></p>
    <p><label for='password'>Password: <input type="password" id='password' class="form-control" name="password" required></label></p>
    <p><button type="submit" class="btn btn-success">Submit</button></p>
</form>

</div>
</div>
{% endblock %}
    {% extends "base.html" %}
{% block content %}

<div class="row justify-content-center">
<div class="col-md-6">
<div show={{show}} creators={{creators}} warnings={{warnings}} genres={{genres}}>

    <h2>{{show.title}} ({{show.year}}) 
        {% if not session['logged_in'] %}
            </h2><br><p style="color: red;">You can't edit or like this show because you are not logged in. Please Log in by clicking "Login" in the Nav Bar to edit/like.</p>
        {% else %}
            {% if not liked %}
                <button type="button" class="btn btn-success" id="likebutton">like</button></h2>
            {% else %}
                <button type="button" class="btn btn-success" id="likebutton">unlike</button></h2>
            {% endif %}
        {% endif %}
    <!--</h2>-->
    
    <p>Number of Likes: <span id="numLikes">{{show.numLikes}}</span></p>
    <br>
  
    <p>{{show.description}}</p>
    
    <br>

    <ul>
        <input type="hidden" name="sid" value="{{show.sid}}">
        <input type="hidden" name="uid" value="{{uid}}">
        <li>Creator(s): 
            {% for creator in creators %}
                <ul class="inside">
                <li>{{creator.name}}</li>
                </ul>
            {% endfor %}
        </li>

        <li>Genre:
            {% for genre in genres %}
                <ul class="inside">
                <li>{{genre.name}}</li>
                </ul>
            {% endfor %}
        </li>
        
        <li>Content Warning: 
            {% for warning in warnings %}
                <ul class="inside">
                <li>{{warning.name}}</li>
                </ul>
            {% endfor %}
        </li>
        <li>Tags:
            {% for tag in tags %}
                <ul class="inside">
                <li>{{tag.name}}: {{tag.val}}</li>
                </ul>
            {% endfor %}
        </li>
        <li>Script: 
            {% if show.script != 'NULL' %}
            <a href={{url_for('script', sid=show.sid)}}>{{show.script}}</a> 
            {% endif %}
        </li>
        <li>Network: {{show.network}}</li>  
    </ul>
    
    {% if session['logged_in'] %}
    <a class="active" href={{url_for('edit',sid=show.sid)}}>
        <button type="button" class="btn btn-outline-danger">Edit</button>
    </a>
    {% endif %}
</div>
</div>
</div>


<script>
// var loggedIn = session['logged_in'];
// console.log(session)
var username = "{{username}}";
var sid = "{{show.sid}}"
var url_like = "/like/";
/* global $ */


$("#likebutton").on("click", function(event){
    if(username == "") return // if not logged in, can't rate
    if($("#likebutton").text()=='like'){
        var currentNum = $("#numLikes").text();
        $("#likebutton").text('unlike');
        $.post(url_like,
            {'sid':sid, 'username':username, 'like':true},
            function(resp){
                console.log(resp)
                $("#numLikes").text(resp.newNum)
            }, 'json');
    } else {
        var currentNum = $("#numLikes").text();
        $("#likebutton").text('like');
        $.post(url_like,
            {'sid':sid, 'username':username, 'like':false},
            function(resp){
                $("#numLikes").text(resp.newNum)
            }, 'json');
    }
});

</script>

{% endblock %}{% extends "base.html" %}

{% block content %}
  <h1 align="center">Search Results</h1>


  <div class="table table-bordered table-hover">
    <table class= "mx-auto" style="width:80%">
      {% if shows%}
      <thead class="thead-dark">
      <tr>
        <th>Title</th>
        <th># Likes</th>
        <th>Description</th> 
        <th>Release Year</th>
        
        <!--Number of likes-->
        <!--Like button column -->
        <!--<th>Like</th>-->
      </tr>
      </thead>
        {% for show in shows %}
        <tr>
          <th><a class="profile" href={{url_for('profile',sid=show.sid)}}>{{show.title}}</a></th>
          <th>{{show.numLikes}}</th>
          <th>{{show.description}}</th>
          <th>{{show.year}}</th>
          <!--<th><button type="button" class="btn btn-success" onclick="addLike()">Like</button></th>-->
        </tr>
        {% endfor %}
      {% else %}
      <tr>
        <th>Result doesn't exist</th>
      </tr>
      {% endif %}
    </table>
  </div>
{% endblock %}{% extends "base.html" %}


{% block content %}
<div class="row justify-content-center">
<div class="col-md-3">

<h1>Sign Up</h1>

<p>Sign up using the form below:</p>


<form id="signupform" action="{{url_for('signup')}}" method="post">
    <p><label for="username">Username: <input type="text" id="username" class="form-control" name="username" required pattern="^\w+$"></label></p>
    <p><label for="password">Password: <input type="password" id="password" class="form-control" name="password1" required> </label></p>
    <p><label for="confirm" >Confirm Password: <input type="password" id="confirm" class="form-control" name="password2" required> </label></p>
    <p><button type="submit" class="btn btn-success">Submit</button></p>
</form>

</div>
</div>


{% endblock %}#messages {
    font-size: large;
    color: red;
}

h1 {
  margin-bottom: 30px;
}


.nav-item nav-link active {
  color: red;
}


th, td {
  border: 1px solid black;
  padding: 15px;
}

label {
  font-weight: bold;
}